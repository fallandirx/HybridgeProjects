import random
import pygame
import sys

from Constants import *
from pygame.time import Clock
from HeroClass import *
from EnemyClass import *
from PowerClass import PowerClass
from SpriteBase import *

# Inicializar Pygame, Inicializar Window y Clock
pygame.init()
window = pygame.display.set_mode((WINDOW_WIDTH, WINDOW_HEIGHT))
clock = pygame.time.Clock()
pygame.display.set_caption(WINDOW_TITLE)

# Variables constantes
GLOBAL_HEALTH = 3
GLOBAL_SCORE = 0

# Cargar background
background_image_raw = pygame.image.load(BACKGROUND_PATH)
background_image = pygame.transform.scale(background_image_raw, (WINDOW_WIDTH, WINDOW_HEIGHT))

# Cargar fuente para la UI
game_font = pygame.font.Font('freesansbold.ttf', 32)


# Cargar sonidos
fire_sound = pygame.mixer.Sound(FIRE_SOUND_PATH)
hit_sound = pygame.mixer.Sound(DAMAGE_SOUND_PATH)
power_sound = pygame.mixer.Sound(POWER_SOUND_PATH)

# Inicializar sprites
all_sprites = pygame.sprite.Group()
hero_sprite = pygame.sprite.Group()
enemy_sprites = pygame.sprite.Group()
fire_sprite = pygame.sprite.Group()
power_sprite = pygame.sprite.Group()


# Spawneamos Heroe desde el inicio del juego
# (El enemy, el fire y el powerup se inicializan en sus respectivos metodos)
hero = HeroClass(PLAYER_IMAGE_PATH, fire_sound)

# Agregamos inicialmente a hero a los grupos de sprites
all_sprites.add(hero)
hero_sprite.add(hero)

# Spawn de Enemy
def spawnRandomEnemy():
    enemy = EnemyClass(random.choice(ENEMY_IMAGES_PATH))
    
    all_sprites.add(enemy)
    enemy_sprites.add(enemy)
    
# Spawn de Powerup
def spawnPower():
    power = PowerClass(POWER_IMAGE_PATH)
    
    all_sprites.add(power)
    power_sprite.add(power)
    
# Disparo de hero
def heroShoot():
    new_fire = hero.shoot()
    if new_fire:
        all_sprites.add(new_fire)
        fire_sprite.add(new_fire)

def enemyHurtPlayer():
    global GLOBAL_HEALTH
    GLOBAL_HEALTH -= 1
    hit_sound.play()

difficulty_level = 1

def changeDifficulty():
    global difficulty_level

    if (GLOBAL_SCORE >= difficulty_level * 5):
        EnemyClass.BASE_SPEED += 0.1
        hero.speed += 0.2
        difficulty_level += 1
        print(f"Dificultad: {difficulty_level}")

def collideCheckObtainPower():
    hero_obtain_power = pygame.sprite.groupcollide(power_sprite, hero_sprite, True, False)

    if hero_obtain_power:
        power_sound.play()
        powerDestroyAllEnemies()


def collideCheckDefeatEnemy():
    global GLOBAL_SCORE
    # Verificar en cada fotograma las colisiones
    hit_enemy_fire = pygame.sprite.groupcollide(enemy_sprites, fire_sprite, True, True)

    for hit in hit_enemy_fire:
        GLOBAL_SCORE += 1
        hit_sound.play()
        print("Score: " + str(GLOBAL_SCORE))

def powerDestroyAllEnemies():
    global GLOBAL_SCORE
    global GLOBAL_HEALTH
    for enemy in list(enemy_sprites):
        enemy.kill()
    GLOBAL_SCORE += 5

    if GLOBAL_HEALTH <= 5:
        GLOBAL_HEALTH += 2
        print(f"Health: {GLOBAL_HEALTH}")


    print(GLOBAL_SCORE)
    
        
# Configurar el temporizador para que el trigger del evento
pygame.time.set_timer(SPAWN_ENEMY_EVENT, 500)
pygame.time.set_timer(SPAWN_POWER_EVENT, random.randint(10000,20000))

# --- Bucle Principal del Juego ---------------------------------------------

playGame = True
gameOver = False
# clock = pygame.time.Clock() # Para controlar los FPS

while playGame:
    # --- Manejo de Eventos (pygame.event) ---
    for event in pygame.event.get():
        # Evento: Cerrar juego
        if event.type == pygame.QUIT:
            playGame = False # Sale del bucle principal
        
        # Evento: Spawn de enemigo
        if event.type == SPAWN_ENEMY_EVENT:
            spawnRandomEnemy()
            
        # Evento: Spawn de powerup
        if event.type == SPAWN_POWER_EVENT:
            spawnPower()
            
        # Evento: Interacciones de jugador
        if event.type == pygame.KEYDOWN:
            
            # Disparo de jugador
            if event.key == pygame.K_SPACE:
                heroShoot()
                
        # Evento: Enemigo golpea a jugador
        if event.type == HIT_ENEMY_EVENT:
            enemyHurtPlayer()
            
    
                    

    # --- Logica de juego y actualizacion ---------------------------------------------

    # Logica de colisiones
    collideCheckDefeatEnemy()
    collideCheckObtainPower()

    # Comprobar vida
    if GLOBAL_HEALTH <= 0:
        gameOver = True

    # Subir dificultad
    changeDifficulty()

    # Carga el update al mismo tiempo de todos los sprites del grupo all_sprites
    all_sprites.update()

    # --- Dibujado (pygame.display) ---
    window.blit(background_image, (0, 0))

    # Dibujar los sprites
    all_sprites.draw(window)

    if game_font:
        score_text = game_font.render(f"YOUR SCORE: {GLOBAL_SCORE}", True, WHITE)
        score_text_rect = score_text.get_rect()
        score_text_rect.topleft = (10,10)
        window.blit(score_text, score_text_rect)

        difficulty_text = game_font.render(f"DIFFICULTY: {difficulty_level}", True, RED)
        difficulty_text_rect = difficulty_text.get_rect()
        difficulty_text_rect.topright = (WINDOW_WIDTH - 10, 10)
        window.blit(difficulty_text, difficulty_text_rect)

        health_text = game_font.render(f"HEALTH: {GLOBAL_HEALTH}", True, BLUE)
        health_text_rect = health_text.get_rect()
        health_text_rect.bottomleft = (10, WINDOW_HEIGHT - 10)
        window.blit(health_text, health_text_rect)

    if gameOver == True:
        window.fill(BLACK)
        gameover_text = game_font.render("Game over. Thanks for playing!", True, WHITE)
        gameover_text_rect = gameover_text.get_rect()
        gameover_text_rect.centerx = WINDOW_WIDTH // 2
        gameover_text_rect.centery = WINDOW_HEIGHT // 2
        window.blit(gameover_text, gameover_text_rect)

    # Actualizar la pantalla
    pygame.display.update()

    # Controlar FPS
    clock.tick(FPS)


# Salir
# pygame.quit()
# sys.exit()